FORMAT: 1A
HOST: https://api.payrollhero.com

# PayrollHero Core API

# Group Changelog

This documentation can be at time ahead of the production api endpoints.
Changelog entries older than 1 week should definitely be live in production.

## Feb 18, 2015

* Added tag filter to the employees endpoint

## Feb 18, 2015

* Added primary_worksite_id filter to the employees endpoint

## Feb 16, 2015

* Added primary_worksite_id to the v3 employee endpoints

## Earlier in Feb 2015

* Added Beta Endpoints for V4 Schedule Events and Tags

# Group Authentication

See the 
[PayrollHero Auth API Documentation](http://docs.payrollheroauthapi.apiary.io/)
for details on to authenticate with our API.

# Group Time API

In order to create clockings the
[PayrollHero Time API](http://docs.payrollherotimeapi.apiary.io/)
is needed. Please refer to it for more details.

# Group Clocking Logic

## What is this section?

This section describes how to logically determine what to show a user when they are arriving at the clocking page.
It assumes knowledge of the scheduling and attendance APIs.

## Summary

The idea is as follows:

An employee has information about their schedules and attendance for a given day as presented by the 
AttendanceDays and DaySchedules endpoint.  They may or may not have either for a given day.

Any implementation must first 'pair' an employees schedules with their attendance information.  This is done
by using the information about each shift from attendance and searching the scheduled shifts for that day
for the closest match.  Once you have paired each piece of attendance with it's corresponding (or non-existent)
schedule information you then can determine the state of each shift.

Paired Shifts may be in one of three states.  `available`, `open`, or `closed`.

### Available
This represents a shift which an employee has not clocked into.

The PairedShift:
+ has attendance that states not currently clocked in which corresponds with attendance state `not_clocked_in`.
+ has a schedule but no attendance attached to it.

### Open
This is a shift which the employee has not clocked out of.  They may be on break, or it may be a previous shift
they have forgotten to clock out of.

The PairedShift:
+ has attendance with states in `missing_clock_out`, or `on_break`.
+ note that a shift may be open with no schedule.  This is a an 'unscheduled' shift.

### Closed
This represents a schedule which has been clocked in and out of.  The employee has completed this shift.

The PairedShift:
+ has attendance with state `clocked_out`
+ there may be a schedule or not.

### Finding a shift for an employee

Employees are allowed to clock in or out of a shift within a 10 hour window from the current time.
When searching for the PairedShift for an employee you must search in order...
+ Search within 10 hours for any `Open` shift.  Where the 'likely clock out time` is used as the distance from now.
+ Search within 10 hours for any `Available` shift if there are no Open shifts within 10 hours.  Here the 'likely clock in time' is used as the distance metric.

If an `Open` shift is found, then UI is presented to the user to allow them to either clock out or go on break for that shift.
If no `Open` shift is found but an `Available` shift is found then present the user with UI to clock into that Available shift.
If no `Open` or `Available` shift is found within 10 hours then they employee is considered `unscheduled`

### 'likely' clock out/in time

For any given PairedShift there is a likely time for clock in, and a likely time that the employee will clock out.

If the shift is scheduled, then these are the scheduled times for clock in and out respectively.

If the shift is not scheduled, then the likely clock in time is the time they clocked in and the likely clock out time is the time they clocked in plus 8 hours.

### Unscheduled State

If neither an open or available shift is found for an employee within the time window he/she is considered unscheduled.  When unscheduled the employee may
clock in if the permissions bit on their employee information 'can_clock_in_unscheduled' is set.  If this is set then they may clock in with no schedule.

### Thresholds

Attached to a schedule there is information about 'thresholds'.  These appear as additional items attached to the shift which say 'earliest_in', 'earliest_out',
'latest_in', and 'latest_out'.  These specify times after or before which an employee may clock in.

There is also a boolean flag if an employee is allowed to cross each of there thresholds.

The threshold check is meant to allow fine tuned control of when an employee sees themselves on the Time Clock.

This way if an employee is early by 30 minutes, and their `early in` threshold is 15 minutes, and they're not allowed to cross it
the ui should not allow them to clock in.  If they are outside of these boundaries the UI should inform them "You are too early/late to clock in/out".

# Group Common Parameters / Headers

#### Statistical Parameters (Parameters used to track API usage.)

        + device_platform (string) ... Current device platform (ie: iPhone4,1 , iPad3,2)
        + version (string) ... Current application version
        + app_name (string) ... The current app's bundle identifier (eg: com.Payrollhero.TeamClock)
        + connection_type (string) ... How app is currently connect (ie: WiFi, 3G)
        + unique_identifier (string) ... Device's uuid
        + attempt_number (number) ... Number of times request has been retried

#### Statistical Headers (can be used instead of the statistical parameters)

        X-App-Platform: Current device platform (ie: iPhone4,1 , iPad3,2)
        X-App-Attempt-Number: Number of times request has been retried
        X-App-UID: Device's uuid
        X-App-Connection-Type: How app is currently connect (ie: WiFi, 3G)
        X-App-Name: The current app's bundle identifier
        X-App-Version: Current application version

# Group Core App

Core is the main service of PayrollHero. Requests against time should be made against https://api.payrollhero.com.

## Employees Collection [/api/v3/employees{?token,page,per_page,with_subordinate_eids,primary_worksite_id,tag}]

### List all Employees [GET]

Returns a list of employees.

#### Important Notes

The `subordinate_eids` key in the response is off by default. To activate it pass `with_subordinate_eids=true`

+ Parameters
    + token (string, required) ... Authentication Token
    + page = `1` (number, optional) ... Current page being requested
    + per_page = `25` (number, optional) ... Number of employees in a page desired to be returned by the API
    + with_subordinate_eids = `false` (boolean, optional) ... Set to true to return an array of each employee's subordinates' account_specific_id
    + primary_worksite_id  (number, optional) ... Only show employees in this primary worksite
    + tag (string, optional) ... Only show employees that have been tagged with this tag
    
+ Response 200 (application/json)

        {
            "employees": [
            {
              "id": 1,
              "account_id": 1,
              "firstname": "John",
              "lastname": "Doe",
              "gender": "male",
              "timezone": "Hong Kong",
              "clock_on_non_work_days": false,
              "avatar": {
                "profile": "https://s3.amazonaws.com/files2.payrollhero.com/production/employees/4111/avatars/profile/27665c39818fc4684334f5ce33a4a2f9?1351665729"
              },
              "primary_worksite_id": 73,
              "subordinate_eids": [
                "36",
                "10",
                "59",
                "97"
              ],
              "date_of_birth": "1984-05-22",
              "employment_date" : "2009-04-01"
            }
          ]
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## Employee Detail [/api/v3/employees/{id}{?token,oauth_signature,oauth_key_id,oauth_nonce,oauth_signature_method,oauth_timestamp,device_platform,version,app_name,connection_type,unique_identifier,attempt_number,page,per_page,with_subordinate_eids,show_tags}]

### Show a single Employee [GET]

Return the attributes of a single employee.

+ Parameters
    + token (string, required) ... Authentication Token
    + id (number, required) ... ID of employee to be fetched
    + show_tags = `false` (boolean, optional) .. show the public tags of this employee

+ Response 200 (application/json)

        {
          'employee': {
            'id': 1,
            'account_id': 1,
            'firstname': 'John',
            'lastname': 'Doe',
            'gender': 'male',
             "timezone": "Hong Kong",
             "clock_on_non_work_days": false,
             "primary_worksite_id": 73,
             "avatar": {
               "profile": "https://s3.amazonaws.com/files2.payrollhero.com/production/employees/4111/avatars/profile/27665c39818fc4684334f5ce33a4a2f9?1351665729"
             },
             "tags": ["foo","bar"],
             "date_of_birth": "1984-05-22",
             "employment_date" : "2009-04-01"
          }
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## DaySchedules Collection [/api/v3/day_schedules{?token,page,per_page,worksite_id,start_date,end_date,permissions,breaks}]

### List all DaySchedules [GET]

__Scope Required:__ `read_schedules`

Returns a list of day schedules.

#### Important Notes

##### Permission information

Keys: `in_early`, `in_late`, `out_early`, `out_late` are boolean, and denote the threshold permiossions
for being able to cross that threshold.

Keys: `earliest_in`, `earliest_out`, `latest_in`, `latest_out` are unix timestamps are they represent
the threshold value for their corresponding check.

All of these keys are optional, they will not show unless passing `permissions=true`

##### Breaks

The `breaks` key in the response is off by default. To activate it pass `breaks=true`

##### Changer

The changer information `changer_id`, `changer_photo`, `changed_at` can be nil, when its present it denotes
information about who changed this schedule and a photo of them when they changed it.

+ Parameters
    + token (string, required) ... Authentication Token
    + page = `1` (number, optional) ... Current page being requested
    + per_page = `25` (number, optional) ... Number of employees in a page desired to be returned by the API
    + start_date (date[format="YYYY-MM-DD"], required) ... Specifies a start date to query schedules for.
    + end_date (date[format="YYYY-MM-DD"], required) ... Specifies an end date to query schedules for.
    + permissions = `false` (boolean, optional) ... Whether to return permissions information with the schedule.
    + breaks = `false` (boolean, optional) ... Whether to return schedules breaks in the information.
    + worksite_id (integer, optional) ... Specifies a worksite_id to filter these schedules by.

+ Response 200 (application/json)

        {
            "day_schedules": [
              {
                "uid": "34373a323031332d31312d3231",
                "employee_id": 123,
                "day": "2014-05-04",
                "paid": false,
                "shifts": [
                  {
                    "worksite_id": 5,
                    "start_time": 1390840620,
                    "end_time": 1390876620,
                    "breaks": [
                      {
                        "kind": "unpaid_break",
                        "start_time": 1390855020,
                        "end_time": 1390858620
                      }
                    ],
                    "in_early": true,
                    "in_late": true,
                    "out_early": true,
                    "out_late": true,
                    "earliest_in": 1390841520,
                    "earliest_out": 1390839720,
                    "latest_in": 1390875720,
                    "latest_out": 1390877520
                  }
                ],
                "changer_id": 123,
                "changer_photo": "https://s3.payrollhero.com/manager-photo.jpeg",
                "changed_at": 1390877520
              }
            ],
            "per_page": 25,
            "page": 1,
            "total_pages": 1
          }
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## Account [/api/v2/account{?token,oauth_signature,oauth_key_id,oauth_nonce,oauth_signature_method,oauth_timestamp}]

### Get Current Account [GET]

__Scope Required:__ `read_account`

Returns the current account the passed in token belongs to.

The `active_employee_count` can be used to smartly set up paging for retrieving all the employees/schedules in the other apis.

+ Parameters
    + token (string, required) ... Authentication Token

+ Response 200 (application/json)

        {
          "account": {
            "id": 65,
            "display_name": "PayrollHero.com Pte. Ltd.",
            "active_employee_count": 7
          }
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## AttendanceDays Collection [/api/v3/attendance_days{?token,page,per_page,start_date,end_date,employee_id}]

### List all Attendance Days [GET]

__Scope Required:__ `read_attendances`

Returns a list of attendance days.

#### Possible `review_category` values:

+ `misassociated`
+ `missing_in`
+ `duplicate_clock_in`
+ `missing_out`
+ `duplicate_clock_out`
+ `in_late`
+ `out_early`
+ `in_early`
+ `out_late`
+ `overtime`
+ `undertime`
+ `perfect`
+ `sent_to_payroll`
+ `publishing_to_payroll`
+ `published_to_payroll`

#### Possible `status` values:

+ `not_clocked_in`
+ `clocked_in`
+ `on_break`
+ `clocked_out`

#### Possible `kind` values:

+ `clock_in`
+ `clock_out`
+ `break_in`
+ `break_out`

+ Parameters
    + token (string, required) ... Authentication Token
    + page = `1` (number, optional) ... Current page being requested
    + per_page = `25` (number, optional) ... Number of employees in a page desired to be returned by the API
    + start_date (date[format="YYYY-MM-DD"], required) ... Specifies a start date to query schedules for.
    + end_date (date[format="YYYY-MM-DD"], required) ... Specifies an end date to query schedules for.
    + employee_id (integer, optional) ... Employee ID to limit this query to

+ Response 200 (application/json)

        {
            attendance_days: [
              {
                date: "2014-01-01",
                employee_id: 123,
                uid: "323031342d30312d30313a313233",
                shifts: [
                  {
                    review_category: "perfect",
                    unscheduled: true,
                    status: "clocked_out",
                    clock_in: {
                      kind: "clock_in",
                      time: 123456,
                      photo_url: "http://...",
                      worksite_id: 5
                    },
                    clock_out: {
                      kind: "clock_out",
                      time: 123456,
                      photo_url: "http://...",
                      worksite_id: 5,
                    },
                    breaks: [
                      {
                        kind: "break_in",
                        time: 1234234
                      }
                    ],
                    resolved_in: {
                      time: 1409965340
                    },
                    resolved_out: {
                      time: 2306561220
                    }
                  }
                ]
              }
            ],
            per_page: 25,
            page: 1,
            total_pages: 1
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## PhotoWall Backgrounds Collection [/api/v2/backgrounds{?token}]

### List all processed photo wall backgrounds [GET]

__Scope Required:__ `read_backgrounds`

Returns a collection keyed with information about generated backgrounds containing employee photos.  Two orientations for the photos
are returned.  The 'horizontal' is more appropriate for display when the width is greater than the height of the viewport
and the 'vertical' is more appropriate when the height is greater than the width.  This endpoint will return new photo walls occasionally.
Any consumer of this endpoint is guaranteed to receive 3 different background images per day.

+ Parameters
    + token (string, required) ... Authentication Token

+ Response 200 (application/json)

        {
          "backgrounds": {
            "horizontal": "https://s3.amazonaws.com/files2.payrollhero.com/production/team_clock_background_resolutions/121/images/original/team_clock_bg.jpg20140128-13912-17heex1?1390944942",
            "vertical": "https://s3.amazonaws.com/files2.payrollhero.com/production/team_clock_background_resolutions/122/images/original/team_clock_bg.jpg20140128-13912-1m68r5i?1390944969"
          }
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## Break Screen Details [/api/v2/break_screen{?token}]

Break screens encapsulate the images and text used to render the page displayed to an employee who is currently on break. It is recommended
that these details only be fetched on initialization of a client application and then cached as they do not need to be kept up to date.

### Display a single break screen [GET]

+ Parameters
    + token (string, required) ... Authentication Token

+ Response 200 (application/json)

        {
          'break_screen': {
            'header': 'Lorem Ipsum',
            'title': 'Lorem ipsum dolor sit amet',
            'body': 'Lorem ipsum dolor sit amet',
            'corner_image': 'https://api.payrollhero.com/assets/timeclock-startbreak.png',
            'image': 'https://api.payrollhero.com/assets/coffee-cup.png'
          }
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission


## Worksites Collection [/api/v2/worksites{?token,page,per_page}]

### List all worksites [GET]

__Scope Required:__ `read_worksites`

Returns a collection of the worksites for the given account.

+ Parameters
    + token (string, required) ... Authentication Token
    + page = `1` (number, optional) ... Current page being requested
    + per_page = `25` (number, optional) ... Number of items per page desired to be returned by the API

+ Response 200 (application/json)

        {
          "worksites": [
            {
              "id": 1,
              "name": "Some Place",
              "address": "123 some place",
              "latitude": 134.2333,
              "longitude": 134.2333,
              "time_zone": "America/Vancouver",
              "proximity_radius": 200,
              "account_id": 1
            }
          ]
        }

+ Response 400

        request parameters are not valid

+ Response 401 (application/json)

        {
          "error": "invalid_token",
          "error_description": "The token used is invalid."
        }

+ Response 403

        the user is recognized but has no valid permission

## Server Time [/api/v2/server_time]

### Get Current Server Time [GET]

__Scope Required:__ none

This endpoint is also the only one that does not require any authentication.

Returns the server's current time as a unix timestamp.

+ Response 200 (application/json)

        {
          "server_time": 1394239827
        }

## Schedule Events Collection BETA [/api/v4/schedule_events{?token,shared_events,time_zone,start_time,end_time,start_date,end_date,employee_ids,worksite_ids,excluded_worksite_ids,page,per_page}]

### Search Schedule Events [GET]

__Scope Required:__ read_schedules

#### Event Kinds

##### Employee Specific Whole Day Events

|Kind              |Description|
|------------------|---|
|paid_day_off      |Mark this entire date as a paid day off|
|unpaid_day_off    |Mark this entire date as an unpaid day off|
|work_this_holiday |Working Shift on a Holiday|

##### Employee Specific Shift Events

|Kind              |Description|
|------------------|-----------|
|recurring_schedule|Regular recurring shift|
|single_shift      |Regular non recurring shift|
|paid_shift_off    |Non Working shift that is Paid|
|unpaid_shift_off  |Non Working shift that is Unpaid|

###### Shared Events
Shared Events are account wide events not attached to an employee,
these include holidays, events, and notes attached to the overall account.

|Kind              |Description|
|------------------|---|
|holiday           |This date is a public holiday|
|event             |An Event to this date, doesn't affect scheduling|
|note              |A note (doesn't effect scheduling)|


+ Parameters

    + token (string, required) ... Authentication Token
    + shared_events (optional, Boolean) ... Include shared (account wide) events in the response, default: false
    + time_zone (string) ... Time Zone to use to perform the search
    + start_time (optional, string) ... Either specify the 'time' or 'date' pair of period params
    + end_time (optional, string) ... Either specify the 'time' or 'date' pair of period params
    + start_date (optional, string) ... Either specify the 'time' or 'date' pair of period params
    + end_date (optional, string) ... Either specify the 'time' or 'date' pair of period params ... Either specify the 'time' or 'date' pair of period params
    + employee_ids (optional, String (CSV of Numbers)) ... Employee IDs to find (eg "1,2,3"), default: none, will return no results
    + worksite_ids (optional, String (CSV of Numbers)) ... Worksites to find (eg: "1,2,3")
    + excluded_worksite_ids (optional, String (CSV of Numbers)) ... Worksites to exclude (eg: "4,5,6")
    + page (optional, Number) ... default 1, which page of the result you're requesting
    + per_page (optional, Number) ... default (and max) 1000, how many items to return per page

+ Response 200

        {
            "schedule_events": {
                "id": 123,
                "kind": "single_shift",

                "employee_id": 7, # can be nil for global account events
            
                # applies to all kinds
                "is_rest_day": true
    
                # applies only to shift type events
                "shift_start_time": "2012-04-23T18:25:43.511Z",
                "shift_end_time": "2012-04-23T22:25:43.511Z"
                "shift_time_zone": "America/Vancouver", # read only from worksite
                "shift_worksite_id": 7, # required
                "shift_breaks": [
                    {
                        "start_time": "2012-04-23T18:25:43.511Z"
                        "end_time": "2012-04-23T18:25:43.511Z"
                        "kind": "unpaid" # or "paid"
                    }
                ]
            
                # applies only to whole day events
                "day_event_name": "Holiday"
                "day_event_date": "2014-12-12"
    
                # recurrence can be 3 types
                
                # Weekly recurrence example
                "recurrence_info": {
                    "type": "week",
                    "count": 1,
                    "on_monday": true
                    "on_tuesday": false
                    "on_wednesday": true
                    "on_thursday": false
                    "on_friday": false
                    "on_saturday": false
                    "on_sunday": false
                    "end_time": "2012-04-23T18:25:43.511Z"
                    
                    "exceptions": [
                        "2014-01-01",
                        "2014-01-02"
                    ]
                }
                
                # Monthly Recurrence Info
                "recurrence_info": {
                    "type": "month",
                    "count": 1,
                    "end_time": "2012-04-23T18:25:43.511Z"
                    
                    "exceptions": [
                        "2014-01-01",
                        "2014-01-02"
                    ]
                }
                
                # No Recurrence Example
                "recurrence_info": {
                    "type": "none",
                }
            },
            "pagination": {
                "page": 2,
                "per_page": 10,
                "total": 15
            }
        }

### Create Event [POST]

__Scope Required:__ write_schedules

The new object should be specified in the post body either as a JSON object or
as CGI arguments.

The post body should be an object with a single key: 'schedule_event'

This key's value should be the new schedule event.

(Recurrence and breaks can be as complicated as needed see the search example for a full version)

Responds with the created schedule's info

+ Parameters

    + token (string, required) ... Authentication Token
    + schedule_event (Hash/JSON, required) ... (in post body) the entire new schedule object to create

+ Request (application/json)

        {
            "schedule_event": {
                "kind": "single_shift",

                "employee_id": 7, # can be nil for global account events
            
                # applies to all kinds
                "is_rest_day": true
    
                # applies only to shift type events
                "shift_start_time": "2012-04-23T18:25:43.511Z",
                "shift_end_time": "2012-04-23T22:25:43.511Z"
                "shift_worksite_id": 7, # required
                "shift_breaks": []
            
                # applies only to whole day events
                "day_event_name": "Holiday"
                "day_event_date": "2014-12-12"
                "day_event_day_type_id": 7,

                "recurrence_info": {
                    "type": "none",
                }

            }
        }

+ Response 201

  [Schedule Event BETA][]

## Schedule Event BETA [/api/v4/schedule_events/{id}?{token}]

+ Model (application/javascript)

    + Body

            {
                "id": 123,
                "kind": "single_shift",

                "employee_id": 7, # can be nil for global account events
            
                # applies to all kinds
                "is_rest_day": true
    
                # applies only to shift type events
                "shift_start_time": "2012-04-23T18:25:43.511Z",
                "shift_end_time": "2012-04-23T22:25:43.511Z"
                "shift_time_zone": "America/Vancouver", # read only from worksite
                "shift_worksite_id": 7, # required
                "shift_breaks": [
                    {
                        "start_time": "2012-04-23T18:25:43.511Z"
                        "end_time": "2012-04-23T18:25:43.511Z"
                        "kind": "unpaid" # or "paid"
                    }
                ]
            
                # applies only to whole day events
                "day_event_name": "Holiday"
                "day_event_date": "2014-12-12"
                "day_event_day_type_id": 7,
    
                # recurrence can be 3 types
                
                # Weekly recurrence example
                "recurrence_info": {
                    "type": "week",
                    "count": 1,
                    "on_monday": true
                    "on_tuesday": false
                    "on_wednesday": true
                    "on_thursday": false
                    "on_friday": false
                    "on_saturday": false
                    "on_sunday": false
                    "end_time": "2012-04-23T18:25:43.511Z"
                    
                    "exceptions": [
                        "2014-01-01",
                        "2014-01-02"
                    ]
                }
                
                # Monthly Recurrence Info
                "recurrence_info": {
                    "type": "month",
                    "count": 1,
                    "end_time": "2012-04-23T18:25:43.511Z"
                    
                    "exceptions": [
                        "2014-01-01",
                        "2014-01-02"
                    ]
                }
                
                # No Recurrence Example
                "recurrence_info": {
                    "type": "none",
                }
            }

### Delete Event [DELETE]

__Scope Required:__ write_schedules

+ Parameters

    + token (string, required) ... Authentication Token
    + id (string, required) ... The ID of the Event

+ Response 204

## Schedule Event Exceptions BETA [/api/v4/schedule_events/{schedule_event_id}/exceptions{?token,date}]

### Add Event Exceptions [POST]

__Scope Required:__ write_schedules

+ Parameters

    + token (string, required) ... Authentication Token
    + schedule_event_id (string, required) ... The ID of the Event
    + date (string, required) ... (iso 8601 date 'YYYY-MM-DD') the date for which to add the exception for

+ Response 201

        {
            "exceptions": [
                "2010-01-01"
            ]
        }
        
## Tags Collection BETA [/api/v4/tags{?token}]

### List Tags [GET]

__Scope Required:__ read_tags

+ Parameters

    + token (string, required) ... Authentication Token

+ Response 200

        {
            tags: [
                {
                    "name": "Alpha Tag",
                    "id": 1,
                    "taggings_count": 123
                }
            ]
        }
